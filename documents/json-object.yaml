---
type: json-object
url_name: index
title: JsonObject - accessing JSON Hashes like a beast!
date: '2015-03-11'
code_examples: true

sections:
  - title:
    body: |
      For more info see:

      * [Creating Json Object Classes](/json-object/classes)
      * [Defining Accessor Methods](/json-object/accessors)

  - title:
    body: |
      I built this gem to allow more control when working with JSON. Instead of just navigating a JSON Hash directly I wanted a quick and easy way to define a custom object for that purpose; define accessor names, default values, and even write value manipulation code.

      As an example if I have this JSON...

      <pre>
      <code class="language-ruby"># how about some json describing mythologies!
      {
          "mythologies": [
              {
                  "type": "Norse",
                  "gods": [
                      {
                          "name": "Thor",
                          "description": "God of thunder and battle"
                      },
                      {
                          "name": "Loki",
                          "description": "Trickster and god of mischief"
                      }
                  ]
              },
              {
                  "type": "Greek",
                  "gods": [
                      {
                          "name": "Zeus",
                          "description": "God of the sky"
                      },
                      {
                          "name": "Ares",
                          "description": "Trickster and god of mischief"
                      }
                  ]
              }
          ]
      }</code>
      </pre>

      Using JSON.parse/load you would be given a hash wich you would use like this.

      <pre>
      <code class="language-ruby"># Dealing with a Hash I have no idea what the data could be by the
      # class name (top level or nested) and you can see to get the values
      # I need to remeber lots of string keys.

      json["mythologies"].first.class
      => Hash

      json["mythologies"].first["type"]
      => "Norse"

      json["mythologies"].first["gods"].first.class
      => Hash

      json["mythologies"].first["gods"].first["name"]
      => "Thor"</code>
      </pre>

      I want to be able to access it like this!

      <pre>
      <code class="language-ruby"># Here the class names have meaning and I can see the accessor
      # names as instance methods on the class.

      mythologies.first.class
      => Mythology

      mythologies.first.type
      => "Norse"

      mythologies.first.gods.first.class
      => God

      mythologies.first.gods.first.name
      => "Thor"

      Mythology.instance_methods(false).inspect
      => [:type, :gods]

      God.instance_methods(false).inspect
      => [:name, :description] </code>
      </pre>

      ##Some Immediate Advantages

      - The code itself looks cleaner and is more concise
      - ...which happily means less typing
      - With well named classes we can make assumptions about the underlying data
      - No more miss-typing keys (ever use a symbol instead of a string, frustrating!)
      - We don't need to load a json source to understand the data

      ##JsonObject as a Solution

      JsonObject is designed to provide this way of accessing the JSON values. It provides these immediate advantages but it can also do a few other things that really make it handy.

  - title: How to Apply JsonObject
    body: |
      Here is an example of how you could use JsonObject(s) to vacilitate accessing the JSON in the desired way.

      <pre>
      <code class="language-ruby"># In this case there are only 3 lines of code needed
      #(split into muilti lines for easier viewing)

      # This line creates a JsonObject class to represent the God attribute
      # Creating two accessor methods on the class that will retrieve "name"
      # and "description" attribute values.
      God = JsonObject.create.
        value_accessors(:name, :description)

      # This JsonObject represents the Mythology attribute and has two
      # accessors. :type is a value accessor but :gods is an array of JSON
      # objects so we supply our God class as an option.
      Mythology = JsonObject.create.json_value_accessors(:type).
        object_accessor(:gods, class: God)

      # Here we use an anonymous Class
      # Create an object accessor to handle the array of Mythology objects.
      # Create an instance of the class passing in the JSON above as a Hash.
      # ...and finally grab the mythologies array that is created.
      mythologies = JsonObject.create.
        object_accessor(:mythologies, class: Mythology, set_parent: false).
          create(JSON.parse(json_string_above)).mythologies</code>
      </pre>

      This is just an example of my preferred way to code a solution, there are a number of ways to create JsonObject classes; and once you start looking at defining accessor methods you will see other options that make them quite useful.

      See [Creating Json Object Classes](/json-object/classes) and [Defining Accessor Methods](/json-object/accessors) for more information and examples.
